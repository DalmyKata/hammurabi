from hammurabi.rules.common import SinglePathRule as SinglePathRule
from pathlib import Path
from typing import Any, Optional

class LineExists(SinglePathRule):
    text: Any = ...
    criteria: Any = ...
    target: Any = ...
    position: Any = ...
    respect_indentation: Any = ...
    indentation_pattern: Any = ...
    def __init__(self, name: str, path: Optional[Path]=..., text: Optional[str]=..., criteria: Optional[str]=..., target: Optional[str]=..., position: int=..., respect_indentation: bool=..., **kwargs: Any) -> Any: ...
    def task(self) -> Path: ...

class LineNotExists(SinglePathRule):
    text: Any = ...
    def __init__(self, name: str, path: Optional[Path]=..., text: Optional[str]=..., **kwargs: Any) -> Any: ...
    def task(self) -> Path: ...

class LineReplaced(SinglePathRule):
    text: Any = ...
    target: Any = ...
    respect_indentation: Any = ...
    indentation_pattern: Any = ...
    def __init__(self, name: str, path: Optional[Path]=..., text: Optional[str]=..., target: Optional[str]=..., respect_indentation: bool=..., **kwargs: Any) -> Any: ...
    def task(self) -> Path: ...
